version: "3.9"

# ---------- Airflow anchor (ใช้ร่วมในหลาย services) ----------
x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: ./Dockerfile
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'   # เคลียร์ UI
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    TZ: UTC                                  # ให้เวลาคงที่
    # ลบ _PIP_ADDITIONAL_REQUIREMENTS ออก (ไปติดตั้งใน Dockerfile/requirements.txt แทน)
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy
  networks:
    - trino-network

services:
  # ---------- Project Nessie (แทน Hive Metastore) ----------
  nessie:
    image: ghcr.io/projectnessie/nessie:0.90.4
    hostname: nessie
    ports:
      - "19120:19120"           # REST API + UI
    environment:
      QUARKUS_HTTP_PORT: 19120
      NESSIE_VERSION_STORE_TYPE: ROCKSDB  # เก็บ metadata แบบฝังไฟล์ เหมาะกับ local/dev
      NESSIE_UI_ENABLED: "true"
    volumes:
      - ./nessie-data:/nessie   # เก็บข้อมูลของ Nessie (RocksDB)
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:19120/api/v2/config"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [trino-network]

  # ---------- MinIO (S3-compatible) ----------
  minio:
    image: minio/minio:RELEASE.2025-07-18T21-56-31Z
    hostname: minio
    ports: ["9000:9000","9001:9001"]
    volumes:
      - ./minio-data:/data
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: test12334567
    command: server /data --console-address ":9001"
    networks: [trino-network]

  # ---------- MinIO client (init: bucket/prefix) ----------
  minio-mc:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z
    depends_on:
      minio:
        condition: service_started
    restart: on-failure
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: test12334567
    entrypoint: >
      /bin/sh -eu -c '
        until mc alias set localminio http://minio:9000 "$${MINIO_ROOT_USER}" "$${MINIO_ROOT_PASSWORD}"; do
          echo "waiting for MinIO..."; sleep 2;
        done
        mc mb -p localminio/lakehouse-data || true
        for p in warehouse raw; do
          mc stat localminio/lakehouse-data/$${p} >/dev/null 2>&1 || \
            echo "" | mc pipe localminio/lakehouse-data/$${p}/.keep
        done
        echo "Bucket + prefixes ready: lakehouse-data/{warehouse,raw}"
      '
    networks: [trino-network]

  # ---------- Trino (พอร์ต 8080 บนโฮสต์) ----------
  trino:
    image: trinodb/trino:476
    hostname: trino_container
    ports: ["8080:8080"]
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/etc/jvm.config:/etc/trino/jvm.config:ro
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_started
    networks: [trino-network]

  # ---------- Airflow Postgres (metadata DB ของ Airflow) ----------
  airflow-postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks: [trino-network]

  # ---------- Airflow init (db migrate + สร้างผู้ใช้) ----------
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo -e "\033[1;33mWARNING!!!: Not enough memory for Docker (>=4GB recommended)\e[0m"
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPUs (>=2 recommended)\e[0m"
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough disk space (>=10GB recommended)\e[0m"
          warning_resources="true"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  # ---------- Airflow Webserver (ขยับ host port -> 8081) ----------
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------- Airflow Scheduler ----------
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------- Airflow Triggerer ----------
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------- Airflow CLI (optional) ----------
  airflow-cli:
    <<: *airflow-common
    profiles: ["debug"]
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command: ["bash", "-c", "airflow"]

  # ---------- Spark ----------
  spark:
    image: bitnami/spark:3.5
    hostname: spark
    user: root
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      TZ: UTC
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark
      SPARK_EXTRA_CLASSPATH: /opt/bitnami/spark/extra-jars/iceberg-spark-runtime.jar:/opt/bitnami/spark/extra-jars/hadoop-aws.jar:/opt/bitnami/spark/extra-jars/aws-java-sdk-bundle-1.12.262.jar
    ports:
      - "8082:8080"
      - "4040:4040"
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./jars:/opt/bitnami/spark/extra-jars:ro
      - ./spark/jobs:/opt/bitnami/spark/jobs
    networks: [trino-network]
    restart: unless-stopped

  spark-worker-1:
    image: bitnami/spark:3.5
    hostname: spark-worker-1
    user: root
    environment:
      TZ: UTC
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 2G
      SPARK_MASTER_URL: spark://spark:7077
      SPARK_EXTRA_CLASSPATH: /opt/bitnami/spark/extra-jars/iceberg-spark-runtime.jar:/opt/bitnami/spark/extra-jars/hadoop-aws.jar:/opt/bitnami/spark/extra-jars/aws-java-sdk-bundle-1.12.262.jar
    depends_on:
      spark:
        condition: service_started
    ports:
      - "8083:8081"
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./jars:/opt/bitnami/spark/extra-jars:ro
    networks: [trino-network]
    restart: unless-stopped

networks:
  trino-network:
    driver: bridge

volumes:
  airflow-postgres-db-volume:
