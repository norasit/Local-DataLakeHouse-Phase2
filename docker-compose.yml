version: "3.9"

services:
  # ---------- Project Nessie (Catalog สำหรับ Iceberg) ----------
  nessie:
    image: ghcr.io/projectnessie/nessie:0.90.4
    hostname: nessie
    ports:
      - "19120:19120"           # REST API + UI
    environment:
      QUARKUS_HTTP_PORT: 19120
      NESSIE_VERSION_STORE_TYPE: ROCKSDB
      NESSIE_UI_ENABLED: "true"
    volumes:
      - ./nessie-data:/nessie
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:19120/api/v2/config"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks: [trino-network]

  # ---------- MinIO (S3-compatible storage) ----------
  minio:
    image: minio/minio:RELEASE.2025-07-18T21-56-31Z
    hostname: minio
    ports: ["9000:9000","9001:9001"]
    volumes:
      - ./minio-data:/data
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: test12334567
    command: server /data --console-address ":9001"
    networks: [trino-network]

  # ---------- MinIO client (init: bucket/prefix) ----------
  minio-mc:
    image: minio/mc:RELEASE.2025-07-21T05-28-08Z
    depends_on:
      minio:
        condition: service_started
    restart: on-failure
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: test12334567
    entrypoint: >
      /bin/sh -eu -c '
        until mc alias set localminio http://minio:9000 "$${MINIO_ROOT_USER}" "$${MINIO_ROOT_PASSWORD}"; do
          echo "waiting for MinIO..."; sleep 2;
        done
        mc mb -p localminio/lakehouse-data || true
        for p in warehouse raw; do
          mc stat localminio/lakehouse-data/$${p} >/dev/null 2>&1 || \
            echo "" | mc pipe localminio/lakehouse-data/$${p}/.keep
        done
        echo "Bucket + prefixes ready: lakehouse-data/{warehouse,raw}"
      '
    networks: [trino-network]

  # ---------- Trino ----------
  trino:
    image: trinodb/trino:476
    hostname: trino_container
    ports: ["8080:8080"]
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/etc/jvm.config:/etc/trino/jvm.config:ro
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_started
    networks: [trino-network]

  # ---------- Spark Master ----------
  spark:
    image: bitnami/spark:3.5
    hostname: spark
    user: root
    depends_on:
      nessie:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      TZ: UTC
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark
      SPARK_EXTRA_CLASSPATH: /opt/bitnami/spark/extra-jars/iceberg-spark-runtime.jar:/opt/bitnami/spark/extra-jars/hadoop-aws.jar:/opt/bitnami/spark/extra-jars/aws-sdk-bundle.jar
    ports:
      - "8082:8080"
      - "4040:4040"
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./jars:/opt/bitnami/spark/extra-jars:ro
      - ./spark/jobs:/opt/bitnami/spark/jobs
    networks: [trino-network]
    restart: unless-stopped

  # ---------- Spark Worker ----------
  spark-worker-1:
    image: bitnami/spark:3.5
    hostname: spark-worker-1
    user: root
    environment:
      TZ: UTC
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 1
      SPARK_WORKER_MEMORY: 2G
      SPARK_MASTER_URL: spark://spark:7077
      SPARK_EXTRA_CLASSPATH: /opt/bitnami/spark/extra-jars/iceberg-spark-runtime.jar:/opt/bitnami/spark/extra-jars/hadoop-aws.jar:/opt/bitnami/spark/extra-jars/aws-sdk-bundle.jar
    depends_on:
      spark:
        condition: service_started
    ports:
      - "8083:8081"
    volumes:
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./jars:/opt/bitnami/spark/extra-jars:ro
    networks: [trino-network]
    restart: unless-stopped

networks:
  trino-network:
    driver: bridge
